
                                                PEMROGRAMAN BERBASIS OBJEK(PBO)     


PERTEMUAN 1
                                       CLASS and OBJEC  
>.Class itu seperti mobil
>.Objek itu macam-macam mobil seperti Avansa,Kijang,Inova,dan lainnya.
>.Kelas itu kosongan 
>.Objek akan dibangun oleh kelas
>.Objek merupakan properti yang berbeda/bermacam-macam yang sudah berisi
>.Class dibagi menjadi propeti dan method
>.Propeti adalah atribut yang dimilki kelas(variable)
>.Method adalah perintah atau apa mamfaatnya seperti berjalan,makan,dan lainnya
>.Class digunakan untuk membangun objek
>.Objek sudah berisi
>.Class bagian atas propeti(identitas) dan bagian bawah method (mengolah/menampilkan data dari propeti)
>.Class: templet dari sebuah objek uktuk menyimpan data 
>.Objek di bentuk oleh class
>.Constructor menggunakan method bawaan Python yang bernama init 
>.Instansiasi Objek (membuat objek dari sebuah kelas)
>.Argumen sesuai dengan fungsi __init__() pada saat kita mendefinisikannya 
>.Mengakses Method Objek:
  Menggunakan operator titik(.)
>.Setiap method harus memiliki parameter self yang artinya method tersebut dimiliki dan terdaftar ke class tersebut untuk membedakan dari method atau fungsi yang ada di luar class
>.Untuk Menampilkan tahun sekarang menggunakan:
   from datetime import datetime
   sekarang = datetime.now()
   tahun = sekarang.year
   print(tahun)
  Seperti codingannya:
      Ini Inputannya:
   import datetime
   th=str(datetime.datetime.now().strftime("%Y"))
   print("sekarang tahun",th)
      Ini Outputnya:
    ('sekarang tahun', '2019')

>.Contoh codingannya:
   Ini Inputannya:
class kubus:
        def __init__(self,s):
            self.sisi=s
        def tampilkansisi(self):
            print(self.sisi)
        def luas(self):
            print("luas= ",self.sisi**2)
        def luaspermukaan(self):
            print("luas permukaan=",(self.sisi**2)*6)
        def volume(self):
            print("volume kubus=",self.sisi**3)
            
kubus1=kubus(4)
kubus1.tampilkansisi()
kubus1.luas()
kubus1.luaspermukaan()
kubus1.volume()
   
   Ini Outputnya:
 4
('luas= ', 16)
('luas permukaan=', 96)
('volume kubus=', 64)


PERTEMUAN KE 2
                                         INHERITANCE 
>.Inheritance adalah pewarisan dari induk ke ke anak 
>.Inheritance adalah salah satu dari tiga konsep dasar pada pemrograman berorientasi objek, Inheritance juga dapat diartikan sebagai cara membuat kelas baru (kelas turunan) pada kelas yang sudah ada (kelas induk) yang artinya kelas baru (kelas turunan) dapat mewarisi apapun yang sudah ada dikelas yang sudah ada(kelas induk).
>.yang diwariskan boleh propeti saja, method saja, propeti dan method, propeti dan propeti 
>.Contoh codingan Inheretance:
     Ini Inputannya:
class Mahasiswa():
    def __init__(self, nama, nim, alamat):
        self.nama = nama
        self.nim = nim
        self.alamat = alamat
 
    def cek_data_mahasiswa(self):
        print('nama :', self.nama, '\nnim :',self.nim, '\nalamat :',self.alamat)
 
class Dosen(Mahasiswa):
    pass
 
mahasiswa1 = Mahasiswa('irwan', '08126671', 'jakarta barat')
mahasiswa1.cek_data_mahasiswa()
 
dosen = Dosen('riko','08126671', 'jakarta selatan')
dosen.cek_data_mahasiswa()

   Ini Outputnya:
('nama :', 'irwan', '\nnim :', '08126671', '\nalamat :', 'jakarta barat')
('nama :', 'riko', '\nnim :', '08126671', '\nalamat :', 'jakarta selatan')

>.Type Inheretance:
1.Single/Simple Inheritance
Single/Simple inheritance artinya subclass hanya dapat mempunyai satu parent class atau hanya dapat mengextends satu kelas saja.
2.Multiple/Heirarchical Inheritance
Multiple inheritance yaitu memperbolehkan satu class memiliki lebih dari satu parent class, solusinya yaitu menggunkan interface.
3.Multi Level Inheritance
Multi level inheritance yaitu memperbolehkan suatu subclass mempunyai subclass lainnya.

>.Ada 4 macam inheritance 
1. Default : Mewariskan Property, property dan method

2. Overriding: Mewariskan Property/method, property dan method
Contoh codingannya:
    Ini Inputannya:
class fish:
    def __init__(self,first_name,last_name="fish"):
        self.first_name=first_name
        self.last_name=last_name
    def swim(self):
        print("the fish is swimming")
    def swim_backwards(self):
        print("the fish can swim backwards.")     
class Trout(fish):
    pass
class clownfish(fish):
    def live_with_anemone(self):
        print("the clownfish is coexixting with")
    def swim_backwards(self):
        print("the shark cannot swim backwards,but can sink .")
    
terry=Trout("terry")
print(terry.first_name+""+terry.last_name)
terry.swim()
terry.swim_backwards()

casey=clownfish("casey")
print(casey.first_name+""+casey.last_name)
casey.swim()
casey.live_with_anemone()

  Ini Inputannya:
terryfish
the fish is swimming
the fish can swim backwards.
caseyfish
the fish is swimming
the clownfish is coexixting with

3. Super : Mewariskan Property, dengan catatan apabila menggunakan super tidak bisa maka menggunakan nama class induknya/superclass, seperti pada contoh codingan dibawah ini tidak bisa menggunakan super maka menggunakan superclass yaitu class lingkaran
Contoh codingannya:
    Ini Inputannya:
# base class / superclass
class lingkaran:
    def __init__(self):
        self.r=int(input("masukkan jari-jari= "))
    def luaslingkaran(self):
        phi=3.14
        luas=phi*self.r**2
        print("luas lingkaran =",luas)
    def kelilinglingkaran(self):
        phi=3.14
        kel=2*phi*self.r
        print("keliling lingkaran =",kel)
       
  # subclass
class tabung(lingkaran):
    def __init__(self):
        self.tinggi_tabung=int(input("masukkan tinggi tabung ="))
        lingkaran.__init__(self)
    def luaspermukaan(self):
        phi=3.14
        luas=2*phi*self.r*(self.r+self.tinggi_tabung)
        print("luas permukaan tabung =",luas)
        
a=lingkaran()
a.luaslingkaran()
a.kelilinglingkaran()
b=tabung()
b.luaspermukaan()

  Ini Inputannya:
masukkan jari-jari= 5
('luas lingkaran =', 78.5)
('keliling lingkaran =', 31.400000000000002)
masukkan tinggi tabung =6
masukkan jari-jari= 7
('luas permukaan tabung =', 571.48)

4. Multiple inheritance : Mewariskan Method
Contoh codingannya:
    Ini Inputannya:
class Coral: 
	def community(self): 
		print("Coral lives in a community.") 

class Anemone: 
	def protect_clownfish(self): 
		print("The anemone is protecting the clownfish.") 

class CoralReef(Coral, Anemone): 
	pass 

  Ini Inputannya:
Coral lives in a community.
The anemone is protecting the clownfish.

PETEMUAN KE 3
                                         POLYMORPHISME 
>.Set untuk memasukkan 
>.Get untuk menampilkan
>.keuntungan OOP yaitu codenya bisa di pakai kembali
>.class mendifinisikan behavior/sesuatu
>.Particular objek "The" yang bermakna tertentu atau spesifik
Contoh codingannya:
    Ini Inputannya:
class shark():
    def swim(self):
        print("the sark is swimming.")
    def swim_backwards(self):
        print("the shark cannot swim backwards, but can sink backwards.")
    def skeleton(self):
        print("the sharks skelaton is made of cartilage" )
class clownfish():
    def swim(self):
        print("the clown fish is swimming")
    def swim_backwards(self):
        print("the clownfish can swim backwards.")
    def skeleton(self):
        print("the clownfish skelaton is made of bone")

sammy=shark()
sammy.skeleton()
casey=clownfish()
casey.skeleton()
def in_the_pacific(fish):
    fish.swim()

in_the_pacific(sammy)
in_the_pacific(casey)
  
  Ini Inputannya:
the sharks skelaton is made of cartilage
the clownfish skelaton is made of bone
the sark is swimming.
the clown fish is swimming

>.Polymorphisme terdiri dari poly(many/banyak) dan morphisme(Form/bentuk)
>.Polymorphisme adalah functionnya sama tapi bentuknya berbeda
>.Polymorphisme ada 2:
  1. Polymorphisme with function yaitu membuat function yang dapat membentuk banyak method.
     Method itu pasti function, tetapi function belum tentu method
 Contoh codingannya:
    Ini Inputannya:
class kucing():
    def tingkah(self):
        print("berjalan dengan 4 kaki dan bunyinya meong")
class anjing():
    def tingkah(self):
        print("berjalan dengan 4 kaki dan bunyinya hog hog")
class ular():
    def tingkah(self):
        print("merayap dan bunyinya set set")

def buattingkah(animal):
    animal.tingkah()
kucingobj=kucing()
anjingobj=anjing()
ularobj=ular()

buattingkah(kucingobj)
buattingkah(anjingobj)
buattingkah(ularobj)

   Ini Inputannya:
berjalan dengan 4 kaki dan bunyinya meong
berjalan dengan 4 kaki dan bunyinya hog hog
merayap dan bunyinya set set
   
  2. Polymorphisme with class methods yaitu membuat method-method dikelas tersebut tanpa membuat function atau memakai kelas method saja.
Contoh codingannya:
    Ini Inputannya:
class shark():
    def swim(self):
        print("the sark is swimming.")
    def swim_backwards(self):
        print("the shark cannot swim backwards, but can sink backwards.")
    def skeleton(self):
        print("the sharks skelaton is made of cartilage" )
class clownfish():
    def swim(self):
        print("the clown fish is swimming")
    def swim_backwards(self):
        print("the clownfish can swim backwards.")
    def skeleton(self):
        print("the clownfish skelaton is made of bone")

sammy=shark()
casey=clownfish()

for fish in(sammy,casey):
    fish.swim_backwards()
    fish.skeleton()
    
   Ini Inputannya:
the shark cannot swim backwards, but can sink backwards.
the sharks skelaton is made of cartilage
the clownfish can swim backwards.
the clownfish skelaton is made of bone

>.Abstrac class yaitu dipakai dikelas induk/Superclass  dimana ada method yang tidak jelas/tidak didefinisikan dengan jelas dikelas induk dan method yang terdefinisikan dengan jelas ada di Subclass/kelas anak
>.Abstrac class pasti ada Inheretance(pewarisan)
Contoh codingannya:
    Ini Inputannya:
class hewan:
    def __init__(self,name):
        self.name=name
    def show(self):
        raise NotimplementedError("subclass must implement abstract  method")  
class kucing(hewan):
    def show(self):
        return("berjalan biasa dan bunyinya meong")
class anjing(hewan):
    def show(self):
        return("berjalan biasa dan bunyinya hog hog")
class ular(hewan):
    def show(self):
        return("merayap dan bunyinya set set")
hewan=[kucing("hewan ke1"),anjing("hewan ke2"),ular("hewan ke3")]  

for hewan in hewan:
    print(hewan.name+":"+hewan.show())

   Ini Inputannya:
hewan ke1:berjalan biasa dan bunyinya meong
hewan ke2:berjalan biasa dan bunyinya hog hog
hewan ke3:merayap dan bunyinya set set

>.List berisi class dan isinya(tidak berpasangan) dan tidak ada objek, seperti:hewan=[kucing("hewan ke1"),anjing("hewan ke2"),ular("hewan ke3")]
>.dictionary class yang ada pasangannya seperti [x,y]